//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Input/MainInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInput"",
    ""maps"": [
        {
            ""name"": ""KeyBoardPlayer"",
            ""id"": ""0589854e-3b54-46c7-9c52-996a09137676"",
            ""actions"": [
                {
                    ""name"": ""LightXAxis"",
                    ""type"": ""Value"",
                    ""id"": ""cd2d1007-57da-474b-be09-7a07ef86ad5e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeavyXAxis"",
                    ""type"": ""Value"",
                    ""id"": ""780169ca-21c8-4eb5-9cf1-beed5c9b1347"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LightJump"",
                    ""type"": ""Button"",
                    ""id"": ""10e44f65-078c-426c-8024-4deeedcf3f39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeavyJump"",
                    ""type"": ""Button"",
                    ""id"": ""56a39e98-a792-44e9-8c64-fd9158deb1d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""dcbe2a45-ddf4-492d-85e8-fabcdf8dc006"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightXAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""859a79bb-b079-4525-a93a-108830e70bba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c4950c56-6b04-40bc-af93-ea5ee2342cfa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2db29862-aae2-473f-9874-2ca74baf25f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d39abc57-1327-4c6a-b39c-466db54b25dd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyXAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""396fbade-658d-4bce-b344-6260edbbb50c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""edb2f60c-49a0-4706-a0b4-1794a024297a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""652b48d4-250d-42b2-932b-112f7ecd66c8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyBoardPlayer
        m_KeyBoardPlayer = asset.FindActionMap("KeyBoardPlayer", throwIfNotFound: true);
        m_KeyBoardPlayer_LightXAxis = m_KeyBoardPlayer.FindAction("LightXAxis", throwIfNotFound: true);
        m_KeyBoardPlayer_HeavyXAxis = m_KeyBoardPlayer.FindAction("HeavyXAxis", throwIfNotFound: true);
        m_KeyBoardPlayer_LightJump = m_KeyBoardPlayer.FindAction("LightJump", throwIfNotFound: true);
        m_KeyBoardPlayer_HeavyJump = m_KeyBoardPlayer.FindAction("HeavyJump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyBoardPlayer
    private readonly InputActionMap m_KeyBoardPlayer;
    private List<IKeyBoardPlayerActions> m_KeyBoardPlayerActionsCallbackInterfaces = new List<IKeyBoardPlayerActions>();
    private readonly InputAction m_KeyBoardPlayer_LightXAxis;
    private readonly InputAction m_KeyBoardPlayer_HeavyXAxis;
    private readonly InputAction m_KeyBoardPlayer_LightJump;
    private readonly InputAction m_KeyBoardPlayer_HeavyJump;
    public struct KeyBoardPlayerActions
    {
        private @MainInput m_Wrapper;
        public KeyBoardPlayerActions(@MainInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LightXAxis => m_Wrapper.m_KeyBoardPlayer_LightXAxis;
        public InputAction @HeavyXAxis => m_Wrapper.m_KeyBoardPlayer_HeavyXAxis;
        public InputAction @LightJump => m_Wrapper.m_KeyBoardPlayer_LightJump;
        public InputAction @HeavyJump => m_Wrapper.m_KeyBoardPlayer_HeavyJump;
        public InputActionMap Get() { return m_Wrapper.m_KeyBoardPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IKeyBoardPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Add(instance);
            @LightXAxis.started += instance.OnLightXAxis;
            @LightXAxis.performed += instance.OnLightXAxis;
            @LightXAxis.canceled += instance.OnLightXAxis;
            @HeavyXAxis.started += instance.OnHeavyXAxis;
            @HeavyXAxis.performed += instance.OnHeavyXAxis;
            @HeavyXAxis.canceled += instance.OnHeavyXAxis;
            @LightJump.started += instance.OnLightJump;
            @LightJump.performed += instance.OnLightJump;
            @LightJump.canceled += instance.OnLightJump;
            @HeavyJump.started += instance.OnHeavyJump;
            @HeavyJump.performed += instance.OnHeavyJump;
            @HeavyJump.canceled += instance.OnHeavyJump;
        }

        private void UnregisterCallbacks(IKeyBoardPlayerActions instance)
        {
            @LightXAxis.started -= instance.OnLightXAxis;
            @LightXAxis.performed -= instance.OnLightXAxis;
            @LightXAxis.canceled -= instance.OnLightXAxis;
            @HeavyXAxis.started -= instance.OnHeavyXAxis;
            @HeavyXAxis.performed -= instance.OnHeavyXAxis;
            @HeavyXAxis.canceled -= instance.OnHeavyXAxis;
            @LightJump.started -= instance.OnLightJump;
            @LightJump.performed -= instance.OnLightJump;
            @LightJump.canceled -= instance.OnLightJump;
            @HeavyJump.started -= instance.OnHeavyJump;
            @HeavyJump.performed -= instance.OnHeavyJump;
            @HeavyJump.canceled -= instance.OnHeavyJump;
        }

        public void RemoveCallbacks(IKeyBoardPlayerActions instance)
        {
            if (m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyBoardPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyBoardPlayerActions @KeyBoardPlayer => new KeyBoardPlayerActions(this);
    public interface IKeyBoardPlayerActions
    {
        void OnLightXAxis(InputAction.CallbackContext context);
        void OnHeavyXAxis(InputAction.CallbackContext context);
        void OnLightJump(InputAction.CallbackContext context);
        void OnHeavyJump(InputAction.CallbackContext context);
    }
}
